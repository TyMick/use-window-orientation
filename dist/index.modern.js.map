{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport debounce from \"lodash.debounce\";\n\ntype Orientation = \"portrait\" | \"landscape\";\n\ninterface OrientationOptions {\n  defaultOrientation?: Orientation;\n}\n\ninterface OrientationResults {\n  orientation: Orientation;\n  portrait: boolean;\n  landscape: boolean;\n}\n\n/**\n * React hook for using window orientation. Not _device_ orientationâ€”this hook determines orientation based on the width and height of the window.\n * @param {OrientationOptions} [options] - The options object\n * @param {Orientation} [options.defaultOrientation=portrait] - The default orientation to return when there is no window\n * @returns {OrientationResults} An object containing the results of the orientation query in both string and boolean form\n */\nexport default function useWindowOrientation(\n  options: OrientationOptions = {}\n): OrientationResults {\n  if (typeof options !== \"object\") {\n    throw new TypeError(\"The options argument must be formatted as an object.\");\n  }\n  const { defaultOrientation = \"portrait\" } = options;\n\n  if (defaultOrientation !== \"portrait\" && defaultOrientation !== \"landscape\") {\n    const isString = typeof defaultOrientation === \"string\";\n    throw new TypeError(\n      `${isString ? '\"' : \"\"}${defaultOrientation}${\n        isString ? '\"' : \"\"\n      } is not a valid defaultOrientation. Use \"portrait\" or \"landscape\".`\n    );\n  }\n\n  const [orientation, setOrientation] = useState(defaultOrientation);\n\n  useEffect(() => {\n    function handleResize(): void {\n      if (window.innerWidth <= window.innerHeight) {\n        setOrientation(\"portrait\");\n      } else {\n        setOrientation(\"landscape\");\n      }\n    }\n    handleResize();\n    window.addEventListener(\"resize\", debounce(handleResize, 400));\n    return () => {\n      window.removeEventListener(\"resize\", debounce(handleResize, 400));\n    };\n  }, []);\n\n  return {\n    orientation,\n    portrait: orientation === \"portrait\",\n    landscape: orientation === \"landscape\",\n  };\n}\n"],"names":["useWindowOrientation","options","TypeError","defaultOrientation","isString","orientation","setOrientation","useState","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","debounce","removeEventListener","portrait","landscape"],"mappings":"wFAqBwBA,EACtBC,EAA8B,IAE9B,GAAuB,iBAAZA,EACT,UAAUC,UAAU,wDAEtB,MAAMC,mBAAEA,EAAqB,YAAeF,EAE5C,GAA2B,aAAvBE,GAA4D,cAAvBA,EAAoC,CAC3E,MAAMC,EAAyC,iBAAvBD,EACxB,UAAUD,aACLE,EAAW,IAAM,KAAKD,IACvBC,EAAW,IAAM,wEAKvB,MAAOC,EAAaC,GAAkBC,EAASJ,GAiB/C,OAfAK,EAAU,KACR,SAASC,IACHC,OAAOC,YAAcD,OAAOE,YAC9BN,EAAe,YAEfA,EAAe,aAKnB,OAFAG,IACAC,OAAOG,iBAAiB,SAAUC,EAASL,EAAc,MAClD,KACLC,OAAOK,oBAAoB,SAAUD,EAASL,EAAc,QAE7D,IAEI,CACLJ,YAAAA,EACAW,SAA0B,aAAhBX,EACVY,UAA2B,cAAhBZ"}